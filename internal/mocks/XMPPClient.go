// Code generated by mockery v1.0.0

package mocks

import mock "github.com/stretchr/testify/mock"

// XMPPClient is an autogenerated mock type for the XMPPClient type
type XMPPClient struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *XMPPClient) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PingC2S provides a mock function with given fields: jid, server
func (_m *XMPPClient) PingC2S(jid string, server string) error {
	ret := _m.Called(jid, server)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(jid, server)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Recv provides a mock function with given fields:
func (_m *XMPPClient) Recv() (interface{}, error) {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendOrg provides a mock function with given fields: org
func (_m *XMPPClient) SendOrg(org string) (int, error) {
	ret := _m.Called(org)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(org)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(org)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
